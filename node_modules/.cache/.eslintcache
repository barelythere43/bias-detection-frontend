[{"/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/index.js":"1","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/reportWebVitals.js":"2","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/App.js":"3","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/ArticleSelection.js":"4","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/GraphPage.js":"5"},{"size":535,"mtime":1699027621592,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1699027621593,"results":"8","hashOfConfig":"7"},{"size":2091,"mtime":1699549224009,"results":"9","hashOfConfig":"7"},{"size":3741,"mtime":1699545456708,"results":"10","hashOfConfig":"7"},{"size":6060,"mtime":1699289984123,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"th9q02",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"15"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"15"},"/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/index.js",[],[],["31","32","33","34","35","36"],"/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/reportWebVitals.js",[],[],"/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/App.js",["37"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport GraphPage from \"./GraphPage\";\nimport ArticleSelection from \"./ArticleSelection\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport logo from \"./INF-AI-Labs-Logo.png\";\n\nfunction App() {\n  const [page, setPage] = useState(1);\n  const [selectedArticles, setSelectedArticles] = useState([]);\n\n  useEffect(() => {\n    if (page === 1) {\n      setSelectedArticles([]);\n    }\n  }, [page]);\n\n  return (\n    <Router>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"\n        integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\"\n        crossOrigin=\"anonymous\"\n      />{\" \"}\n      {/* Wrap your App with Router */}\n      <nav className=\"navbar bg-light justify-content-center\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">\n            <img\n              src={logo}\n              alt=\"Logo\"\n              width=\"300\"\n              height=\"125\"\n              className=\"d-inline-block align-text-top\"\n            />\n          </a>\n          <span className=\"navbar-brand mb-0 h1\">\n            Article Subjectivity Detector\n          </span>\n        </div>\n      </nav>\n      <div className=\"App\">\n        <div className=\"container\">\n          {page === 1 && (\n            <>\n              <div className=\"card\">\n                <ArticleSelection\n                  selectedArticles={selectedArticles}\n                  setSelectedArticles={setSelectedArticles}\n                />\n                <button\n                  className=\"modern-button\"\n                  disabled={selectedArticles.length === 0}\n                  onClick={() => setPage(2)}\n                >\n                  Plot\n                </button>\n              </div>\n            </>\n          )}\n          {page === 2 && (\n            <GraphPage selectedArticles={selectedArticles} setPage={setPage} />\n          )}\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/ArticleSelection.js",["38","39","40"],[],"// ArticleSelection.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./ArticleSelection.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nfunction ArticleSelection({ setSelectedArticles }) {\n  const [articles, setArticles] = useState([]);\n  const navigate = useNavigate();\n  const [url, setUrl] = useState(\"\");\n\n  useEffect(() => {\n    console.log(articles);\n  }, [articles]);\n\n  const fetchArticles = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/articles\"); // Absolute URL\n      const data = await response.json();\n      console.log(data);\n      setArticles(data.articles);\n    } catch (error) {\n      console.error(\"Failed fetching articles:\", error);\n    }\n  };\n  const handleCheckboxChange = (title) => {\n    setSelectedArticles((prev) => {\n      if (prev.includes(title)) {\n        return prev.filter((articleId) => articleId !== title);\n      } else {\n        return [...prev, title];\n      }\n    });\n  };\n\n  const handleFetchArticle = (event) => {\n    event.preventDefault();\n    console.log(url);\n    // if (!articleUrl.trim()) {\n    //   return;\n    // }\n    fetch(\n      `http://localhost:3001/api/articles/by-url?url=${encodeURIComponent(\n        url,\n      )}`,\n    )\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setArticles((prevArticles) => [...prevArticles, data.article]);\n        console.log(articles);\n      })\n      .catch((err) => {});\n  };\n\n  const handleInputChange = (event) => {\n    setUrl(event.target.value);\n    console.log(url);\n  };\n\n  function getIconForCategory(category) {\n    switch (category) {\n      case \"Technology\":\n        return \"fa-laptop\";\n      case \"Politics\":\n        return \"fa-university\";\n      case \"Sports\":\n        return \"fa-soccer-ball-o\";\n      default:\n        return \"fa-newspaper-o\";\n    }\n  }\n\n  const handlePlot = () => {\n    navigate(\"/graph\");\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"card\">\n        <div className=\"card-header\">Select Articles</div>\n      </div>\n      <div className=\"card-body\">\n        <form onSubmit={handleFetchArticle}>\n          <div className=\"form-group\">\n            <label htmlFor=\"url\">Enter URL:</label>\n            <input\n              type=\"url\"\n              id=\"url\"\n              name=\"url\"\n              value={url}\n              onChange={handleInputChange}\n              placeholder=\"https://example.com\"\n              pattern=\"https?://.*\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n      <div className=\"articles-container\">\n        {articles.map((article) => (\n          <div className={`article-item ${article.category}`} key={article.id}>\n            <input\n              type=\"checkbox\"\n              id={`checkbox-${article.title}`}\n              title={article.title}\n              value={article.title}\n              onChange={() => handleCheckboxChange(article.title)}\n              className=\"hidden-checkbox\"\n            />\n            <label\n              htmlFor={`checkbox-${article.title}`}\n              className=\"styled-checkbox\"\n            ></label>\n            <label\n              className=\"article-label\"\n              htmlFor={`checkbox-${article.title}`}\n            >\n              <div className=\"article-title\">{article.title}</div>\n            </label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ArticleSelection;\n","/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/GraphPage.js",["41","42"],[],"// GraphPage.js\nimport React, { useEffect, useState } from \"react\";\nimport zoomPlugin from \"chartjs-plugin-zoom\";\nimport Annotation from \"chartjs-plugin-annotation\";\nimport { Scatter } from \"react-chartjs-2\";\nimport PlaceIcon from \"@mui/icons-material/Place\";\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend,\n  zoomPlugin,\n  Annotation,\n);\n\nfunction GraphPage({ selectedArticles, setPage }) {\n  const [articlePoints, setArticlePoints] = useState([]);\n\n  const articleColors = [\"#FF6384\", \"#36eb60\", \"#FFCE56\", \"#f3aafd\", \"#9966FF\"];\n\n  useEffect(() => {\n    if (selectedArticles.length) {\n      fetchSelectedArticles();\n    }\n  }, [selectedArticles]);\n\n  const fetchArticleData = async (title) => {\n    try {\n      const encodedTitle = encodeURIComponent(title.replace(/%/g, \"%25\"));\n      const response = await fetch(\n        `http://localhost:3001/api/articles/${encodedTitle}`,\n      );\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(`Failed to fetch article: ${title}`, error);\n      return null; // or use a fallback value\n    }\n  };\n\n  const fetchSelectedArticles = async () => {\n    try {\n      console.log(selectedArticles);\n      const requests = selectedArticles.map((title) => fetchArticleData(title));\n      const articlesResults = await Promise.allSettled(requests);\n      const articlesData = articlesResults\n        .filter((result) => result.status === \"fulfilled\" && result.value)\n        .map((result) => result.value);\n\n      const points = articlesData.map((article) => ({\n        x: article.sentiment_score,\n        y: article.subjectivity_score,\n        label: `Title: ${article.title}\\nPolarity: ${article.sentiment_score}\\nSubjectivity: ${article.subjectivity_score}\\nCategory: ${article.category}\\nSource: ${article.source}`,\n      }));\n\n      setArticlePoints(points);\n    } catch (error) {\n      console.error(\"Error fetching selected articles\", error);\n      // Handle or propagate the error as needed\n    }\n  };\n\n  const graphData = {\n    datasets: [\n      {\n        label: \"Articles\",\n        data: articlePoints,\n        backgroundColor: articlePoints.map(\n          (_, i) => articleColors[i % articleColors.length],\n        ),\n        pointRadius: 8,\n        hoverBackgroundColor: \"rgba(255, 255, 255, 0.8)\",\n        hoverBorderColor: \"rgba(255, 255, 255, 1)\",\n        hoverBorderWidth: 2,\n        hoverRadius: 12,\n      },\n    ],\n  };\n\n  const graphOptions = {\n    scales: {\n      x: {\n        type: \"linear\",\n        position: \"bottom\",\n        title: {\n          display: true,\n          text: \"Polarity (Negative vs Positive Sentiment)\",\n          font: {\n            size: 24,\n            family: \"Poppins\",\n            weight: 600,\n          },\n          color: \"#ffffff\",\n        },\n        min: -1,\n        max: 1,\n        ticks: {\n          font: {\n            weight: \"bold\",\n          },\n          color: \"#ffffff\",\n          stepSize: 0.25,\n        },\n        grid: {\n          color: \"transparent\",\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Subjectivity (Opinion vs Fact)\",\n          font: {\n            size: 24,\n            family: \"Poppins\",\n            weight: 600,\n          },\n          color: \"#ffffff\",\n        },\n        min: -1,\n        max: 1,\n        ticks: {\n          font: {\n            weight: \"bold\",\n          },\n          stepSize: 0.2,\n          color: \"#e5e5e5\",\n        },\n        grid: {\n          color: \"transparent\",\n        },\n      },\n    },\n    plugins: {\n      title: {\n        display: false,\n        text: \"Article Subjectivity and Polarity\",\n      },\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        bodyFont: {\n          size: 12,\n          family: \"Poppins\",\n          weight: 800,\n        },\n        callbacks: {\n          label: function (context) {\n            var label = context.raw.label;\n            if (label) {\n              // If the label is a single string, split it by the newline character\n              // and return the array of strings to create multiline labels.\n              return label.split(\"\\n\");\n            }\n            return label || \"\";\n          },\n        },\n      },\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: \"xy\",\n        },\n        zoom: {\n          wheel: {\n            enabled: true,\n          },\n          pinch: {\n            enabled: true,\n          },\n          mode: \"xy\",\n        },\n      },\n      annotation: {\n        annotations: {\n          verticalLine: {\n            type: \"line\",\n            yMin: 1,\n            yMax: -1,\n            borderColor: \"#ffffff\",\n            borderWidth: 3,\n            borderDash: [10, 5],\n            xMin: 0,\n            xMax: 0,\n          },\n          // horizontalLine: {\n          //   type: \"line\",\n          //   xMin: -1,\n          //   xMax: 1,\n          //   borderColor: \"#ffffff\",\n          //   borderWidth: 3,\n          //   borderDash: [10, 5],\n          //   yMin: 0.5,\n          //   yMax: 0.5,\n          // },\n          shadedArea: {\n            type: \"box\",\n            yMin: -0.333,\n            yMax: 0.333,\n            xMin: -1,\n            xMax: 1,\n            backgroundColor: \"rgba(99,154,255,0.53)\",\n            borderDash: [10, 5],\n            borderColor: \"#020024\",\n          },\n        },\n      },\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  };\n\n  return (\n    <div className=\"card\">\n      <div>\n        <h2>Article Subjectivity and Polarity</h2>\n        <div className=\"graph-container\">\n          <Scatter data={graphData} options={graphOptions} />\n        </div>\n        <button className=\"modern-button\" onClick={() => setPage(1)}>\n          Back to Article Selection\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphPage;\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":29,"column":11,"nodeType":"57","endLine":29,"endColumn":48},{"ruleId":"58","severity":1,"message":"59","line":16,"column":9,"nodeType":"60","messageId":"61","endLine":16,"endColumn":22},{"ruleId":"58","severity":1,"message":"62","line":66,"column":12,"nodeType":"60","messageId":"61","endLine":66,"endColumn":30},{"ruleId":"58","severity":1,"message":"63","line":79,"column":9,"nodeType":"60","messageId":"61","endLine":79,"endColumn":19},{"ruleId":"58","severity":1,"message":"64","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":38,"column":6,"nodeType":"67","endLine":38,"endColumn":24,"suggestions":"68"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["69"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'fetchArticles' is assigned a value but never used.","Identifier","unusedVar","'getIconForCategory' is defined but never used.","'handlePlot' is assigned a value but never used.","'PlaceIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSelectedArticles'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-object-constructor",{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchSelectedArticles, selectedArticles]",{"range":"73","text":"74"},[806,824],"[fetchSelectedArticles, selectedArticles]"]