{"ast":null,"code":"var _jsxFileName = \"/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/GraphPage.js\",\n  _s = $RefreshSig$();\n// GraphPage.js\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\nfunction GraphPage({\n  selectedArticles,\n  setPage\n}) {\n  _s();\n  const [articlePoints, setArticlePoints] = useState([]);\n  const articleColors = ['#FF6384', '#36eb60', '#FFCE56', '#f3aafd', '#9966FF'];\n  useEffect(() => {\n    console.log(selectedArticles);\n    if (selectedArticles.length) {\n      fetchSelectedArticles();\n    }\n  }, [selectedArticles]);\n  const fetchArticleData = async title => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/articles/${title}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(`Failed to fetch article: ${title}`, error);\n      return null; // or use a fallback value\n    }\n  };\n\n  const fetchSelectedArticles = async () => {\n    try {\n      const requests = selectedArticles.map(title => fetchArticleData(title));\n      const articlesResults = await Promise.allSettled(requests);\n      const articlesData = articlesResults.filter(result => result.status === 'fulfilled' && result.value).map(result => result.value);\n      const points = articlesData.map(article => ({\n        x: article.sentiment_score,\n        y: article.subjectivity_score,\n        label: `Title: ${article.title}\\nPolarity: ${article.sentiment_score}\\nSubjectivity: ${article.subjectivity_score}\\nCategory: ${article.category}\\nSource: ${article.source}`\n      }));\n      setArticlePoints(points);\n    } catch (error) {\n      console.error('Error fetching selected articles', error);\n      // Handle or propagate the error as needed\n    }\n  };\n\n  const graphData = {\n    datasets: [{\n      label: 'Articles',\n      data: articlePoints,\n      backgroundColor: articlePoints.map((_, i) => articleColors[i % articleColors.length]),\n      pointRadius: 5\n    }]\n  };\n  const graphOptions = {\n    scales: {\n      x: {\n        type: 'linear',\n        position: 'bottom',\n        title: {\n          display: true,\n          text: 'Polarity (Negative vs Positive Sentiment)',\n          color: '#ffffff'\n        },\n        min: -1,\n        max: 1,\n        ticks: {\n          color: '#ffffff',\n          stepSize: 0.25\n        },\n        grid: {\n          color: '#ffffff'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Subjectivity (Opinion vs Fact)',\n          font: {\n            size: 12\n          },\n          color: '#ffffff'\n        },\n        min: 0,\n        max: 1,\n        ticks: {\n          stepSize: 0.2,\n          color: '#e5e5e5'\n        },\n        grid: {\n          color: '#e5e5e5'\n        }\n      }\n    },\n    plugins: {\n      title: {\n        display: false,\n        text: 'Article Subjectivity and Polarity'\n      },\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            var label = context.raw.label;\n            if (label) {\n              // If the label is a single string, split it by the newline character\n              // and return the array of strings to create multiline labels.\n              return label.split('\\n');\n            }\n            return label || '';\n          }\n        }\n      }\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Article Subjectivity and Polarity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '500px',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Scatter, {\n          data: graphData,\n          options: graphOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(1),\n        children: \"Back to Article Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n_s(GraphPage, \"6gYz0zzUmfuMhD85iv0Xq/g/C7I=\");\n_c = GraphPage;\nexport default GraphPage;\nvar _c;\n$RefreshReg$(_c, \"GraphPage\");","map":{"version":3,"names":["React","useEffect","useState","Link","Scatter","Chart","ChartJS","CategoryScale","LinearScale","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","GraphPage","selectedArticles","setPage","_s","articlePoints","setArticlePoints","articleColors","console","log","length","fetchSelectedArticles","fetchArticleData","title","response","fetch","ok","Error","status","json","error","requests","map","articlesResults","Promise","allSettled","articlesData","filter","result","value","points","article","x","sentiment_score","y","subjectivity_score","label","category","source","graphData","datasets","data","backgroundColor","_","i","pointRadius","graphOptions","scales","type","position","display","text","color","min","max","ticks","stepSize","grid","font","size","plugins","legend","tooltip","callbacks","context","raw","split","responsive","maintainAspectRatio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","options","onClick","_c","$RefreshReg$"],"sources":["/Users/adityamathew/dev/infinitive_work/bias-detection-frontend/src/GraphPage.js"],"sourcesContent":["// GraphPage.js\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Scatter } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nfunction GraphPage({ selectedArticles, setPage }) {\n    const [articlePoints, setArticlePoints] = useState([]);\n\n    const articleColors = ['#FF6384', '#36eb60', '#FFCE56', '#f3aafd', '#9966FF'];\n\n    useEffect(() => {\n        console.log(selectedArticles);\n        if (selectedArticles.length) {\n            fetchSelectedArticles();\n        }\n    }, [selectedArticles]);\n\n    const fetchArticleData = async (title) => {\n        try {\n            const response = await fetch(`http://localhost:3001/api/articles/${title}`);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        } catch (error) {\n            console.error(`Failed to fetch article: ${title}`, error);\n            return null; // or use a fallback value\n        }\n    };\n\n    const fetchSelectedArticles = async () => {\n        try {\n            const requests = selectedArticles.map(title => fetchArticleData(title));\n            const articlesResults = await Promise.allSettled(requests);\n            const articlesData = articlesResults\n                .filter(result => result.status === 'fulfilled' && result.value)\n                .map(result => result.value);\n\n            const points = articlesData.map(article => ({\n                x: article.sentiment_score,\n                y: article.subjectivity_score,\n                label: `Title: ${article.title}\\nPolarity: ${article.sentiment_score}\\nSubjectivity: ${article.subjectivity_score}\\nCategory: ${article.category}\\nSource: ${article.source}`,\n            }));\n\n            setArticlePoints(points);\n        } catch (error) {\n            console.error('Error fetching selected articles', error);\n            // Handle or propagate the error as needed\n        }\n    };\n\n    const graphData = {\n        datasets: [\n            {\n                label: 'Articles',\n                data: articlePoints,\n                backgroundColor: articlePoints.map((_, i) => articleColors[i % articleColors.length]),\n                pointRadius: 5\n            },\n        ],\n    };\n\n    const graphOptions = {\n        scales: {\n            x: {\n                type: 'linear',\n                position: 'bottom',\n                title: {\n                    display: true,\n                    text: 'Polarity (Negative vs Positive Sentiment)',\n                    color: '#ffffff'\n                },\n                min: -1,\n                max: 1,\n                ticks: {\n                    color: '#ffffff',\n                    stepSize: 0.25,\n                },\n                grid: {\n                    color: '#ffffff',\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Subjectivity (Opinion vs Fact)',\n                    font: {\n                        size: 12\n                    },\n                    color: '#ffffff'\n                },\n                min: 0,\n                max: 1,\n                ticks: {\n                    stepSize: 0.2,\n                    color: '#e5e5e5'\n                },\n                grid: {\n                    color: '#e5e5e5'\n                }\n            },\n        },\n        plugins: {\n            title: {\n                display: false,\n                text: 'Article Subjectivity and Polarity',\n            },\n            legend: {\n                display: false,\n            },\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        var label = context.raw.label;\n                        if (label) {\n                            // If the label is a single string, split it by the newline character\n                            // and return the array of strings to create multiline labels.\n                            return label.split('\\n');\n                        }\n                        return label || '';\n                    }\n                }\n            }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n    };\n\n    return (\n        <div className=\"card\">\n            <div>\n                <h1>Article Subjectivity and Polarity</h1>\n                <div style={{ height: '500px', width: '100%' }}>\n                    <Scatter data={graphData} options={graphOptions} />\n                </div>\n                <button onClick={() => setPage(1)}>Back to Article Selection</button>\n            </div>\n        </div>\n    );\n}\n\nexport default GraphPage;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBR,OAAO,CAACS,QAAQ,CACZR,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,SAASI,SAASA,CAAC;EAAEC,gBAAgB;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMoB,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAE7ErB,SAAS,CAAC,MAAM;IACZsB,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC;IAC7B,IAAIA,gBAAgB,CAACQ,MAAM,EAAE;MACzBC,qBAAqB,CAAC,CAAC;IAC3B;EACJ,CAAC,EAAE,CAACT,gBAAgB,CAAC,CAAC;EAEtB,MAAMU,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACtC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCF,KAAM,EAAC,CAAC;MAC3E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC7D;MACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAE,4BAA2BP,KAAM,EAAC,EAAEO,KAAK,CAAC;MACzD,OAAO,IAAI,CAAC,CAAC;IACjB;EACJ,CAAC;;EAED,MAAMT,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACA,MAAMU,QAAQ,GAAGnB,gBAAgB,CAACoB,GAAG,CAACT,KAAK,IAAID,gBAAgB,CAACC,KAAK,CAAC,CAAC;MACvE,MAAMU,eAAe,GAAG,MAAMC,OAAO,CAACC,UAAU,CAACJ,QAAQ,CAAC;MAC1D,MAAMK,YAAY,GAAGH,eAAe,CAC/BI,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACV,MAAM,KAAK,WAAW,IAAIU,MAAM,CAACC,KAAK,CAAC,CAC/DP,GAAG,CAACM,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC;MAEhC,MAAMC,MAAM,GAAGJ,YAAY,CAACJ,GAAG,CAACS,OAAO,KAAK;QACxCC,CAAC,EAAED,OAAO,CAACE,eAAe;QAC1BC,CAAC,EAAEH,OAAO,CAACI,kBAAkB;QAC7BC,KAAK,EAAG,UAASL,OAAO,CAAClB,KAAM,eAAckB,OAAO,CAACE,eAAgB,mBAAkBF,OAAO,CAACI,kBAAmB,eAAcJ,OAAO,CAACM,QAAS,aAAYN,OAAO,CAACO,MAAO;MAChL,CAAC,CAAC,CAAC;MAEHhC,gBAAgB,CAACwB,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOV,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD;IACJ;EACJ,CAAC;;EAED,MAAMmB,SAAS,GAAG;IACdC,QAAQ,EAAE,CACN;MACIJ,KAAK,EAAE,UAAU;MACjBK,IAAI,EAAEpC,aAAa;MACnBqC,eAAe,EAAErC,aAAa,CAACiB,GAAG,CAAC,CAACqB,CAAC,EAAEC,CAAC,KAAKrC,aAAa,CAACqC,CAAC,GAAGrC,aAAa,CAACG,MAAM,CAAC,CAAC;MACrFmC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC;EAED,MAAMC,YAAY,GAAG;IACjBC,MAAM,EAAE;MACJf,CAAC,EAAE;QACCgB,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE,QAAQ;QAClBpC,KAAK,EAAE;UACHqC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,2CAA2C;UACjDC,KAAK,EAAE;QACX,CAAC;QACDC,GAAG,EAAE,CAAC,CAAC;QACPC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAE;UACHH,KAAK,EAAE,SAAS;UAChBI,QAAQ,EAAE;QACd,CAAC;QACDC,IAAI,EAAE;UACFL,KAAK,EAAE;QACX;MACJ,CAAC;MACDlB,CAAC,EAAE;QACCrB,KAAK,EAAE;UACHqC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,gCAAgC;UACtCO,IAAI,EAAE;YACFC,IAAI,EAAE;UACV,CAAC;UACDP,KAAK,EAAE;QACX,CAAC;QACDC,GAAG,EAAE,CAAC;QACNC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAE;UACHC,QAAQ,EAAE,GAAG;UACbJ,KAAK,EAAE;QACX,CAAC;QACDK,IAAI,EAAE;UACFL,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDQ,OAAO,EAAE;MACL/C,KAAK,EAAE;QACHqC,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE;MACV,CAAC;MACDU,MAAM,EAAE;QACJX,OAAO,EAAE;MACb,CAAC;MACDY,OAAO,EAAE;QACLC,SAAS,EAAE;UACP3B,KAAK,EAAE,SAAAA,CAAS4B,OAAO,EAAE;YACrB,IAAI5B,KAAK,GAAG4B,OAAO,CAACC,GAAG,CAAC7B,KAAK;YAC7B,IAAIA,KAAK,EAAE;cACP;cACA;cACA,OAAOA,KAAK,CAAC8B,KAAK,CAAC,IAAI,CAAC;YAC5B;YACA,OAAO9B,KAAK,IAAI,EAAE;UACtB;QACJ;MACJ;IACJ,CAAC;IACD+B,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE;EACzB,CAAC;EAED,oBACIrE,OAAA;IAAKsE,SAAS,EAAC,MAAM;IAAAC,QAAA,eACjBvE,OAAA;MAAAuE,QAAA,gBACIvE,OAAA;QAAAuE,QAAA,EAAI;MAAiC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1C3E,OAAA;QAAK4E,KAAK,EAAE;UAAEC,MAAM,EAAE,OAAO;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAAP,QAAA,eAC3CvE,OAAA,CAACV,OAAO;UAACoD,IAAI,EAAEF,SAAU;UAACuC,OAAO,EAAEhC;QAAa;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACN3E,OAAA;QAAQgF,OAAO,EAAEA,CAAA,KAAM5E,OAAO,CAAC,CAAC,CAAE;QAAAmE,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACtE,EAAA,CAtIQH,SAAS;AAAA+E,EAAA,GAAT/E,SAAS;AAwIlB,eAAeA,SAAS;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}